{"version":3,"sources":["components/Grid.js","components/GridTypeSelect.js","js/isValidInput.js","components/AddSubplotInterface.js","components/Subplot2GridInterface.js","components/Subplot2Grid.js","components/CodeDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Grid","_ref","gridSpecs","gridSize","selectedIndex","displayStyle","gridTemplateRows","concat","gridTemplateColumns","react_default","a","createElement","className","style","totalItems","gridItems","i","push","key","createGrid","GridTypeSelect","setType","selectedType","handleClick","type","id","onClick","isValidInput","input","mn","mx","isNaN","AddSubplotInterface","setAddSubplot","maxIndex","onChange","rows","parseInt","document","getElementById","value","columns","defaultValue","min","max","Subplot2GridInterface","set2Grid","shape","loc","rowspan","colspan","shapeRowMin","Math","shapeColMin","loc1max","loc2max","rowspanMax","colspanMax","shape1","shape2","loc1","loc2","Subplot2Grid","selectedItems","selected","matrix","index","length","newRow","createMatrix","apply","Object","toConsumableArray","slice","selectedItemList","curIndex","j","includes","CodeDisplay","gs","gridSpec","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetState","setState","addSubplot","subplot2Grid","state","bind","assertThisInitialized","components_GridTypeSelect","components_AddSubplotInterface","components_CodeDisplay","components_Grid","components_Subplot2GridInterface","components_Subplot2Grid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aaf7f356.chunk.js","sourcesContent":["import React from 'react';\n\nconst Grid = ({ gridSpecs }) => {\n    const {gridSize, selectedIndex} = gridSpecs\n    \n    const displayStyle = {\n        gridTemplateRows: `repeat(${gridSize[0]}, 1fr)`,\n        gridTemplateColumns: `repeat(${gridSize[1]}, 1fr)`,\n    }\n\n    const createGrid = () => {\n        const totalItems = gridSize[0] * gridSize[1]\n        let gridItems = []\n        for(let i = 0; i < totalItems; i++){\n            if(i + 1 === selectedIndex){\n                gridItems.push(\n                    <div key={i} className=\"grid-item selected-true\"><p className=\"grid-item-index\">{i + 1}</p></div>\n                )\n            } else {\n                gridItems.push(\n                    <div key={i} className=\"grid-item selected-false\"><p className=\"grid-item-index\">{i + 1}</p></div>\n                )\n            }\n        }\n        return gridItems\n    }\n\n    return(\n        <div className=\"grid-display\" style={displayStyle}>\n            {createGrid()}\n        </div>\n    )\n}\n\nexport default Grid;","import React from 'react';\nimport Grid from './Grid';\n\nconst GridTypeSelect = ({ setType, selectedType }) => {\n\n    const handleClick = (type) => {\n        return () => setType(type)\n    }\n\n    return (\n        <div id=\"grid-type-select\">\n            <button className={`type-selector-button button-selected-${selectedType === \"add_subplot\"}`} \n                onClick={handleClick('add_subplot')}>\n                    .add_subplot\n            </button>\n            \n            <button className={`type-selector-button button-selected-${selectedType === \"subplot2Grid\"}`} \n                onClick={handleClick('subplot2Grid')}>\n                    .subplot2grid\n            </button>\n        </div>\n    )\n}\n\nexport default GridTypeSelect;","const isValidInput = (input, mn, mx) => {\n    // Checks to make sure input is between a given min and max.\n    // If not, returns either min or max depending on if it was greater then or less than target range\n\n    if(isNaN(input) || input <= mn) return mn\n    if(input >= mx) return mx\n    return input\n}\n\nexport default isValidInput;","import React from 'react'\n\nimport isValidInput from '../js/isValidInput';\n\nconst AddSubplotInterface = ({ setAddSubplot, gridSpecs }) => {\n    const { gridSize } = gridSpecs;\n    const maxIndex = gridSize[0] * gridSize[1]; \n\n    const getGridSpecs = () => {\n        const rows = isValidInput(parseInt(document.getElementById(\"grid-rows\").value), 1, 12)\n        const columns = isValidInput(parseInt(document.getElementById(\"grid-columns\").value), 1, 12)\n        \n        const selectedIndex = isValidInput(parseInt(document.getElementById(\"grid-selected-index\").value), 1, maxIndex)\n\n        setAddSubplot([rows, columns], selectedIndex)\n\n    }\n\n\n    return(\n        <div id=\"AddSubplotInterface\" className=\"interface\">\n            <form id=\"interface-form\" onChange={getGridSpecs}>\n                .add_subplot(\n                <input id=\"grid-rows\" type=\"number\" defaultValue=\"1\" min=\"1\" max=\"12\"/>,\n                \n                <input id=\"grid-columns\" type=\"number\" defaultValue=\"1\" min=\"1\" max=\"12\"/>,\n\n                <input id=\"grid-selected-index\" type=\"number\" defaultValue=\"1\" min=\"1\" max={`${maxIndex}`}/>\n                )\n            </form>\n        </div>\n    )\n\n}\n\nexport default AddSubplotInterface; ","import React from 'react'\n\nimport isValidInput from '../js/isValidInput';\n\nconst Subplot2GridInterface = ({ set2Grid, gridSpecs }) => {\n\n    const {shape, loc, rowspan, colspan} = gridSpecs\n\n    const shapeRowMin = Math.max(loc[0] + 1, loc[0] + rowspan)\n    const shapeColMin = Math.max(loc[1] + 1, loc[1] + colspan)\n\n    const [shape1max, shape2max, loc1max, loc2max, rowspanMax, colspanMax] = [\n        9, \n        9, \n        shape[0] - rowspan, \n        shape[1] - colspan,\n        shape[0] - loc[0],\n        shape[1] - loc[1],\n    ]\n\n    const handleChange = () => {\n        const shape1 = isValidInput(parseInt(document.getElementById(\"shape-1\").value), 1, shape1max)\n        const shape2 = isValidInput(parseInt(document.getElementById(\"shape-2\").value), 1, shape2max)\n\n        const loc1 = isValidInput(parseInt(document.getElementById(\"loc-1\").value), 0, loc1max)\n        const loc2 = isValidInput(parseInt(document.getElementById(\"loc-2\").value), 0, loc2max)\n\n        const rowspan = isValidInput(parseInt(document.getElementById(\"rowspan\").value), 1, rowspanMax)\n        const colspan = isValidInput(parseInt(document.getElementById(\"colspan\").value), 1, colspanMax)\n               \n        const shape = [shape1, shape2]\n        const loc = [loc1, loc2]\n\n        set2Grid(shape, loc, rowspan, colspan)\n\n\n    }\n\n    return(\n        <div id=\"subplot-2-grid-interface\" className=\"interface\">\n            <form onChange={handleChange}>\n                .subplot2grid(\n                \n                (<input id=\"shape-1\" type=\"number\" defaultValue=\"1\" min={shapeRowMin} max=\"9\"/>,\n                <input id=\"shape-2\" type=\"number\" defaultValue=\"1\" min={shapeColMin} max=\"9\" />),\n\n                (<input id=\"loc-1\" type=\"number\" defaultValue=\"0\" min=\"0\" max={shape[0] - rowspan} />,\n                <input id=\"loc-2\" type=\"number\" defaultValue=\"0\" min=\"0\" max={shape[1] - colspan}/>),\n\n                <br/>\n                \n                rowspan=<input id=\"rowspan\" type=\"number\" defaultValue=\"1\" min=\"1\" max={shape[0] - loc[0]}/>,\n                colspan=<input id=\"colspan\" type=\"number\" defaultValue=\"1\" min=\"1\" max={shape[1] - loc[1]}/>,\n\n                )\n            </form>\n        </div>\n    )\n\n}\n\nexport default Subplot2GridInterface;","import React from 'react';\nimport checkInts from '../js/checkInts';\n\nconst Subplot2Grid = ({ gridSpecs }) => {\n\n    let validEntry = true;\n\n    const {shape, loc, rowspan, colspan} = gridSpecs\n\n    const createMatrix = (shape) => {\n        let matrix = [];\n        let index = 0\n        while(matrix.length < shape[0]){\n            let newRow = []\n            while(newRow.length < shape[1]){\n                newRow.push(index)\n                index += 1\n            }\n            matrix.push(newRow)\n        }\n        return matrix\n    }\n\n    const selectedItemList = () => {\n        let selected = [];\n        const matrix = createMatrix(shape)        \n        for(let i = loc[0]; i < loc[0] + rowspan; i++){\n            selected.push(...matrix[i].slice(loc[1], loc[1] + colspan))\n        }\n        return selected\n    }\n    \n    const createGrid = () => {\n        const selectedItems = selectedItemList();\n        \n        if(!selectedItems) return <div><p>Invalid Plot</p></div>\n\n        const gridItems = []\n        let curIndex = 0;\n        for(let i = 0; i < shape[0]; i++){\n            for(let j = 0; j < shape[1]; j++){\n                if(selectedItems.includes(curIndex)){\n                    gridItems.push(\n                        <div key={`${i}x${j}`} className=\"grid-item selected-true\"><p>{`${i},${j}`}</p></div>\n                    )\n                } else {\n                    gridItems.push(\n                        <div key={`${i}x${j}`} className=\"grid-item selected-false\"><p>{`${i},${j}`}</p></div>\n                    )\n                }\n                curIndex += 1\n            }\n    \n        }\n\n        return gridItems;\n    }\n\n    const displayStyle = {\n        gridTemplateRows: `repeat(${shape[0]}, 1fr)`,\n        gridTemplateColumns: `repeat(${shape[1]}, 1fr)`,\n    }\n\n    return(\n        <div className=\"grid-display\" style={displayStyle}>\n            {createGrid()}\n        </div>\n    )\n}\n\nexport default Subplot2Grid;","import React from 'react';\n\nconst CodeDisplay = ({ type, gridSpec }) => {\n    const gs = gridSpec;\n    return(\n        <div className=\"code-display\">\n            {\n                type === \"add_subplot\" ?\n                <div>\n                    {`fig.add_subplot(${gs.gridSize[0]}, ${gs.gridSize[1]}, ${gs.selectedIndex})`}\n                </div>\n                :\n                <div>\n                    {`plt.subplot2grid((${gs.shape[0]}, ${gs.shape[1]}), (${gs.loc[0]}, ${gs.loc[1]}), rowspan=${gs.rowspan}, colspan=${gs.colspan})`}\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default CodeDisplay;","import React, { Component } from 'react';\nimport './App.css';\n\nimport GridTypeSelect from './components/GridTypeSelect'\nimport AddSubplotInterface from './components/AddSubplotInterface';\nimport Grid from './components/Grid';\nimport Subplot2GridInterface from './components/Subplot2GridInterface';\nimport Subplot2Grid from './components/Subplot2Grid';\nimport CodeDisplay from './components/CodeDisplay';\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      type: \"add_subplot\",\n\n      addSubplot: {\n        gridSize: [1, 1],\n        selectedIndex: 1\n      },\n\n      subplot2Grid: {\n        shape: [1, 1],\n        loc: [0,0],\n        rowspan: 1,\n        colspan: 1\n      }\n    }\n    \n    this.setType = this.setType.bind(this)\n    this.setAddSubplot = this.setAddSubplot.bind(this)\n    this.set2Grid = this.set2Grid.bind(this)\n    this.resetState = this.resetState.bind(this)\n  }\n\n  resetState = () => {\n    this.setState({\n      type: \"add_subplot\",\n\n      addSubplot: {\n        gridSize: [1, 1],\n        selectedIndex: 1\n      },\n\n      subplot2Grid: {\n        shape: [1, 1],\n        loc: [0,0],\n        rowspan: 1,\n        colspan: 1\n      }\n    })\n  }\n\n  setType = (type) => {\n    this.resetState()\n    this.setState({type})\n  }\n\n  setAddSubplot = (gridSize, selectedIndex) => {\n    this.setState({addSubplot: {gridSize, selectedIndex}})\n  }\n\n  set2Grid = (shape, loc, rowspan, colspan) => {\n    this.setState({subplot2Grid: {shape, loc, rowspan, colspan}})\n  }\n\n  render(){\n    \n    return (\n      <div className=\"App\">\n        <h1 className=\"title\"><em>Plot Planner</em></h1>\n        <p className=\"description\">\n          <em>\n            A simple tool to help you visualize and plan your subplots in matplotlib.\n          </em>\n        </p>\n        <GridTypeSelect selectedType={this.state.type} setType={this.setType} />\n        {\n          this.state.type === 'add_subplot' \n          &&\n          <div>\n            <AddSubplotInterface setAddSubplot={this.setAddSubplot} gridSpecs={this.state.addSubplot}/>\n            <CodeDisplay gridSpec={this.state.addSubplot} type={this.state.type} />\n            <Grid gridSpecs={this.state.addSubplot}/>\n          </div>\n        }\n\n        {\n          this.state.type === \"subplot2Grid\"\n          &&\n          <div>\n            <Subplot2GridInterface set2Grid={this.set2Grid} gridSpecs={this.state.subplot2Grid}/>\n            <CodeDisplay gridSpec={this.state.subplot2Grid} type={this.state.type} />\n            <Subplot2Grid gridSpecs={this.state.subplot2Grid} />\n          </div>\n        }\n\n      </div>\n    );    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}