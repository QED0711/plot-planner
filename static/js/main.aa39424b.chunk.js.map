{"version":3,"sources":["components/Grid.js","components/GridTypeSelect.js","components/AddSubplotInterface.js","components/Subplot2GridInterface.js","components/Subplot2Grid.js","components/CodeDisplay.js","App.js","serviceWorker.js","index.js"],"names":["Grid","_ref","gridSpecs","gridSize","selectedIndex","displayStyle","gridTemplateRows","concat","gridTemplateColumns","react_default","a","createElement","className","style","totalItems","gridItems","i","push","key","createGrid","GridTypeSelect","setType","selectedType","handleClick","type","id","onClick","AddSubplotInterface","setAddSubplot","maxIndex","onChange","rows","parseInt","document","getElementById","value","columns","defaultValue","min","max","Subplot2GridInterface","set2Grid","shape","loc","rowspan","colspan","shape1","shape2","loc1","loc2","Object","defineProperty","Subplot2Grid","selectedItems","selected","matrix","index","length","newRow","createMatrix","apply","toConsumableArray","slice","selectedItemList","includes","CodeDisplay","gs","gridSpec","App","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetState","setState","addSubplot","subplot2Grid","state","bind","assertThisInitialized","components_GridTypeSelect","components_AddSubplotInterface","components_CodeDisplay","components_Grid","components_Subplot2GridInterface","components_Subplot2Grid","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6LAkCeA,SAhCF,SAAAC,GAAmB,IAAhBC,EAAgBD,EAAhBC,UACLC,EAA2BD,EAA3BC,SAAUC,EAAiBF,EAAjBE,cAEXC,EAAe,CACjBC,iBAAgB,UAAAC,OAAYJ,EAAS,GAArB,UAChBK,oBAAmB,UAAAD,OAAYJ,EAAS,GAArB,WAoBvB,OACIM,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,MAAOR,GAlBtB,WAGf,IAFA,IAAMS,EAAaX,EAAS,GAAKA,EAAS,GACtCY,EAAY,GACRC,EAAI,EAAGA,EAAIF,EAAYE,IACxBA,EAAI,IAAMZ,EACTW,EAAUE,KACNR,EAAAC,EAAAC,cAAA,OAAKO,IAAKF,EAAGJ,UAAU,2BAA0BH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBI,EAAI,KAGzFD,EAAUE,KACNR,EAAAC,EAAAC,cAAA,OAAKO,IAAKF,EAAGJ,UAAU,4BAA2BH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBI,EAAI,KAIlG,OAAOD,EAKFI,MCLEC,EArBQ,SAAAnB,GAA+B,IAA5BoB,EAA4BpB,EAA5BoB,QAASC,EAAmBrB,EAAnBqB,aAEzBC,EAAc,SAACC,GACjB,OAAO,kBAAMH,EAAQG,KAGzB,OACIf,EAAAC,EAAAC,cAAA,OAAKc,GAAG,oBACJhB,EAAAC,EAAAC,cAAA,UAAQC,UAAS,wCAAAL,OAA2D,gBAAjBe,GACvDI,QAASH,EAAY,gBADzB,gBAKAd,EAAAC,EAAAC,cAAA,UAAQC,UAAS,wCAAAL,OAA2D,iBAAjBe,GACvDI,QAASH,EAAY,iBADzB,mBCgBGI,EA9Ba,SAAA1B,GAAkC,IAA/B2B,EAA+B3B,EAA/B2B,cAWnBzB,EAXkDF,EAAhBC,UAWlCC,SACF0B,EAAW1B,EAAS,GAAKA,EAAS,GAExC,OACIM,EAAAC,EAAAC,cAAA,OAAKc,GAAG,sBAAsBb,UAAU,aACpCH,EAAAC,EAAAC,cAAA,QAAMc,GAAG,iBAAiBK,SAdb,WACjB,IAAMC,EAAOC,SAASC,SAASC,eAAe,aAAaC,OACrDC,EAAUJ,SAASC,SAASC,eAAe,gBAAgBC,OAE3D/B,EAAgB4B,SAASC,SAASC,eAAe,uBAAuBC,OAE9EP,EAAc,CAACG,EAAMK,GAAUhC,KAQ3B,gBAEIK,EAAAC,EAAAC,cAAA,SAAOc,GAAG,YAAYD,KAAK,SAASa,aAAa,IAAIC,IAAI,IAAIC,IAAI,OAFrE,IAII9B,EAAAC,EAAAC,cAAA,SAAOc,GAAG,eAAeD,KAAK,SAASa,aAAa,IAAIC,IAAI,IAAIC,IAAI,OAJxE,IAMI9B,EAAAC,EAAAC,cAAA,SAAOc,GAAG,sBAAsBD,KAAK,SAASa,aAAa,IAAIC,IAAI,IAAIC,IAAG,GAAAhC,OAAKsB,KANnF,eC4BGW,EA5Ce,SAAAvC,GAA6B,IAA1BwC,EAA0BxC,EAA1BwC,SAAUvC,EAAgBD,EAAhBC,UAEhCwC,EAAgCxC,EAAhCwC,MAAOC,EAAyBzC,EAAzByC,IAAKC,EAAoB1C,EAApB0C,QAASC,EAAW3C,EAAX2C,QAmB5B,OACIpC,EAAAC,EAAAC,cAAA,OAAKc,GAAG,2BAA2Bb,UAAU,aACzCH,EAAAC,EAAAC,cAAA,QAAMmB,SAnBO,WACjB,IAAMgB,EAASd,SAASC,SAASC,eAAe,WAAWC,OACrDY,EAASf,SAASC,SAASC,eAAe,WAAWC,OAErDa,EAAOhB,SAASC,SAASC,eAAe,SAASC,OACjDc,EAAOjB,SAASC,SAASC,eAAe,SAASC,OAEjDS,EAAUZ,SAASC,SAASC,eAAe,WAAWC,OACtDU,EAAUb,SAASC,SAASC,eAAe,WAAWC,OAK5DM,EAHc,CAACK,EAAQC,GACX,CAACC,EAAMC,GAEEL,EAASC,KAM1B,mBAGKpC,EAAAC,EAAAC,cAAA,SAAOc,GAAG,UAAUD,KAAK,SAASa,aAAa,IAAIE,IAAI,KAAKD,IAAI,MACjE7B,EAAAC,EAAAC,cAAA,SAAOc,GAAG,UAAUD,KAAK,SAASa,aAAa,IAAIE,IAAI,KAAKD,IAAI,MAJpE,OAMK7B,EAAAC,EAAAC,cAAA,QAAAuC,OAAAC,EAAA,EAAAD,CAAA,CAAOzB,GAAG,QAAQD,KAAK,SAASa,aAAa,IAAIE,IAAI,IAAID,IAAI,KAA7D,MAAsEI,EAAM,GAAKE,IAClFnC,EAAAC,EAAAC,cAAA,QAAAuC,OAAAC,EAAA,EAAAD,CAAA,CAAOzB,GAAG,QAAQD,KAAK,SAASa,aAAa,IAAIE,IAAI,IAAID,IAAI,KAA7D,MAAsEI,EAAM,GAAKG,IAPrF,KASIpC,EAAAC,EAAAC,cAAA,WATJ,WAWYF,EAAAC,EAAAC,cAAA,QAAAuC,OAAAC,EAAA,EAAAD,CAAA,CAAOzB,GAAG,UAAUD,KAAK,SAASa,aAAa,IAAIE,IAAI,KAAKD,IAAI,KAAhE,MAAyEI,EAAM,GAAKC,EAAI,KAXpG,aAYYlC,EAAAC,EAAAC,cAAA,SAAOc,GAAG,UAAUD,KAAK,SAASa,aAAa,IAAIE,IAAI,KAAKD,IAAI,MAZ5E,iBCsCGc,SA5DM,SAAAnD,GAAmB,IAAhBC,EAAgBD,EAAhBC,UAIbwC,EAAgCxC,EAAhCwC,MAAOC,EAAyBzC,EAAzByC,IAAKC,EAAoB1C,EAApB0C,QAASC,EAAW3C,EAAX2C,QA4CtBxC,EAAe,CACjBC,iBAAgB,UAAAC,OAAYmC,EAAM,GAAlB,UAChBlC,oBAAmB,UAAAD,OAAYmC,EAAM,GAAlB,WAGvB,OACIjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeC,MAAOR,GAzBtB,WAIf,IAHA,IAAMS,EAAa4B,EAAM,GAAKA,EAAM,GAC9BW,EAXe,WAGrB,IAFA,IAAIC,EAAW,GACTC,EAhBW,SAACb,GAGlB,IAFA,IAAIa,EAAS,GACTC,EAAQ,EACND,EAAOE,OAASf,EAAM,IAAG,CAE3B,IADA,IAAIgB,EAAS,GACPA,EAAOD,OAASf,EAAM,IACxBgB,EAAOzC,KAAKuC,GACZA,GAAS,EAEbD,EAAOtC,KAAKyC,GAEhB,OAAOH,EAKQI,CAAajB,GACpB1B,EAAI2B,EAAI,GAAI3B,EAAI2B,EAAI,GAAKC,EAAS5B,IACtCsC,EAASrC,KAAT2C,MAAAN,EAAQJ,OAAAW,EAAA,EAAAX,CAASK,EAAOvC,GAAG8C,MAAMnB,EAAI,GAAIA,EAAI,GAAKE,KAEtD,OAAOS,EAKeS,GAChBhD,EAAY,GACVC,EAAI,EAAGA,EAAIF,EAAYE,IACxBqC,EAAcW,SAAShD,GACtBD,EAAUE,KACNR,EAAAC,EAAAC,cAAA,OAAKO,IAAKF,EAAGJ,UAAU,2BAA0BH,EAAAC,EAAAC,cAAA,SAAIK,KAGzDD,EAAUE,KACNR,EAAAC,EAAAC,cAAA,OAAKO,IAAKF,EAAGJ,UAAU,4BAA2BH,EAAAC,EAAAC,cAAA,SAAIK,KAKlE,OAAOD,EAUFI,MCtCE8C,EAlBK,SAAAhE,GAAwB,IAArBuB,EAAqBvB,EAArBuB,KACb0C,EADkCjE,EAAfkE,SAEzB,OACI1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAEE,gBAATY,EACAf,EAAAC,EAAAC,cAAA,8BAAAJ,OACwB2D,EAAG/D,SAAS,GADpC,MAAAI,OAC2C2D,EAAG/D,SAAS,GADvD,MAAAI,OAC8D2D,EAAG9D,cADjE,MAIAK,EAAAC,EAAAC,cAAA,gCAAAJ,OAC0B2D,EAAGxB,MAAM,GADnC,MAAAnC,OAC0C2D,EAAGxB,MAAM,GADnD,QAAAnC,OAC4D2D,EAAGvB,IAAI,GADnE,MAAApC,OAC0E2D,EAAGvB,IAAI,GADjF,eAAApC,OACiG2D,EAAGtB,QADpG,cAAArC,OACwH2D,EAAGrB,QAD3H,QC6FDuB,cA5Fb,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAApB,OAAAqB,EAAA,EAAArB,CAAAsB,KAAAJ,IAChBE,EAAApB,OAAAuB,EAAA,EAAAvB,CAAAsB,KAAAtB,OAAAwB,EAAA,EAAAxB,CAAAkB,GAAAO,KAAAH,KAAMH,KAwBRO,WAAa,WACXN,EAAKO,SAAS,CACZrD,KAAM,cAENsD,WAAY,CACV3E,SAAU,CAAC,EAAG,GACdC,cAAe,GAGjB2E,aAAc,CACZrC,MAAO,CAAC,EAAG,GACXC,IAAK,CAAC,EAAE,GACRC,QAAS,EACTC,QAAS,MAtCGyB,EA2ClBjD,QAAU,SAACG,GACT8C,EAAKM,aACLN,EAAKO,SAAS,CAACrD,UA7CC8C,EAgDlB1C,cAAgB,SAACzB,EAAUC,GACzBkE,EAAKO,SAAS,CAACC,WAAY,CAAC3E,WAAUC,oBAjDtBkE,EAoDlB7B,SAAW,SAACC,EAAOC,EAAKC,EAASC,GAC/ByB,EAAKO,SAAS,CAACE,aAAc,CAACrC,QAAOC,MAAKC,UAASC,cAlDnDyB,EAAKU,MAAQ,CACXxD,KAAM,cAENsD,WAAY,CACV3E,SAAU,CAAC,EAAG,GACdC,cAAe,GAGjB2E,aAAc,CACZrC,MAAO,CAAC,EAAG,GACXC,IAAK,CAAC,EAAE,GACRC,QAAS,EACTC,QAAS,IAIbyB,EAAKjD,QAAUiD,EAAKjD,QAAQ4D,KAAb/B,OAAAgC,EAAA,EAAAhC,CAAAoB,IACfA,EAAK1C,cAAgB0C,EAAK1C,cAAcqD,KAAnB/B,OAAAgC,EAAA,EAAAhC,CAAAoB,IACrBA,EAAK7B,SAAW6B,EAAK7B,SAASwC,KAAd/B,OAAAgC,EAAA,EAAAhC,CAAAoB,IAChBA,EAAKM,WAAaN,EAAKM,WAAWK,KAAhB/B,OAAAgC,EAAA,EAAAhC,CAAAoB,IAtBFA,wEA0DhB,OACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAQH,EAAAC,EAAAC,cAAA,8BACtBF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACXH,EAAAC,EAAAC,cAAA,wFAIFF,EAAAC,EAAAC,cAACwE,EAAD,CAAgB7D,aAAckD,KAAKQ,MAAMxD,KAAMH,QAASmD,KAAKnD,UAEvC,gBAApBmD,KAAKQ,MAAMxD,MAEXf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACyE,EAAD,CAAqBxD,cAAe4C,KAAK5C,cAAe1B,UAAWsE,KAAKQ,MAAMF,aAC9ErE,EAAAC,EAAAC,cAAC0E,EAAD,CAAalB,SAAUK,KAAKQ,MAAMF,WAAYtD,KAAMgD,KAAKQ,MAAMxD,OAC/Df,EAAAC,EAAAC,cAAC2E,EAAD,CAAMpF,UAAWsE,KAAKQ,MAAMF,cAKV,iBAApBN,KAAKQ,MAAMxD,MAEXf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4E,EAAD,CAAuB9C,SAAU+B,KAAK/B,SAAUvC,UAAWsE,KAAKQ,MAAMD,eACtEtE,EAAAC,EAAAC,cAAC0E,EAAD,CAAalB,SAAUK,KAAKQ,MAAMD,aAAcvD,KAAMgD,KAAKQ,MAAMxD,OACjEf,EAAAC,EAAAC,cAAC6E,EAAD,CAActF,UAAWsE,KAAKQ,MAAMD,wBApF9BU,aCAEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvF,EAAAC,EAAAC,cAACsF,EAAD,MAAShE,SAASC,eAAe,SD2H3C,kBAAmBgE,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.aa39424b.chunk.js","sourcesContent":["import React from 'react';\n\nconst Grid = ({ gridSpecs }) => {\n    const {gridSize, selectedIndex} = gridSpecs\n    \n    const displayStyle = {\n        gridTemplateRows: `repeat(${gridSize[0]}, 1fr)`,\n        gridTemplateColumns: `repeat(${gridSize[1]}, 1fr)`,\n    }\n\n    const createGrid = () => {\n        const totalItems = gridSize[0] * gridSize[1]\n        let gridItems = []\n        for(let i = 0; i < totalItems; i++){\n            if(i + 1 === selectedIndex){\n                gridItems.push(\n                    <div key={i} className=\"grid-item selected-true\"><p className=\"grid-item-index\">{i + 1}</p></div>\n                )\n            } else {\n                gridItems.push(\n                    <div key={i} className=\"grid-item selected-false\"><p className=\"grid-item-index\">{i + 1}</p></div>\n                )\n            }\n        }\n        return gridItems\n    }\n\n    return(\n        <div className=\"grid-display\" style={displayStyle}>\n            {createGrid()}\n        </div>\n    )\n}\n\nexport default Grid;","import React from 'react';\nimport Grid from './Grid';\n\nconst GridTypeSelect = ({ setType, selectedType }) => {\n\n    const handleClick = (type) => {\n        return () => setType(type)\n    }\n\n    return (\n        <div id=\"grid-type-select\">\n            <button className={`type-selector-button button-selected-${selectedType === \"add_subplot\"}`} \n                onClick={handleClick('add_subplot')}>\n                    .add_subplot\n            </button>\n            \n            <button className={`type-selector-button button-selected-${selectedType === \"subplot2Grid\"}`} \n                onClick={handleClick('subplot2Grid')}>\n                    .subplot2grid\n            </button>\n        </div>\n    )\n}\n\nexport default GridTypeSelect;","import React from 'react'\n\nconst AddSubplotInterface = ({ setAddSubplot, gridSpecs }) => {\n\n    const getGridSpecs = () => {\n        const rows = parseInt(document.getElementById(\"grid-rows\").value)\n        const columns = parseInt(document.getElementById(\"grid-columns\").value)\n        \n        const selectedIndex = parseInt(document.getElementById(\"grid-selected-index\").value)\n        \n        setAddSubplot([rows, columns], selectedIndex)\n    }\n\n    const { gridSize } = gridSpecs;\n    const maxIndex = gridSize[0] * gridSize[1]; \n\n    return(\n        <div id=\"AddSubplotInterface\" className=\"interface\">\n            <form id=\"interface-form\" onChange={getGridSpecs}>\n                .add_subplot(\n                <input id=\"grid-rows\" type=\"number\" defaultValue=\"1\" min=\"1\" max=\"12\"/>,\n                \n                <input id=\"grid-columns\" type=\"number\" defaultValue=\"1\" min=\"1\" max=\"12\"/>,\n\n                <input id=\"grid-selected-index\" type=\"number\" defaultValue=\"1\" min=\"1\" max={`${maxIndex}`}/>\n                )\n            </form>\n        </div>\n    )\n\n}\n\nexport default AddSubplotInterface; ","import React from 'react'\n\nconst Subplot2GridInterface = ({ set2Grid, gridSpecs }) => {\n\n    const {shape, loc, rowspan, colspan} = gridSpecs\n\n    const handleChange = () => {\n        const shape1 = parseInt(document.getElementById(\"shape-1\").value)\n        const shape2 = parseInt(document.getElementById(\"shape-2\").value)\n\n        const loc1 = parseInt(document.getElementById(\"loc-1\").value)\n        const loc2 = parseInt(document.getElementById(\"loc-2\").value)\n\n        const rowspan = parseInt(document.getElementById(\"rowspan\").value)\n        const colspan = parseInt(document.getElementById(\"colspan\").value)\n\n        const shape = [shape1, shape2]\n        const loc = [loc1, loc2]\n\n        set2Grid(shape, loc, rowspan, colspan)\n\n    }\n\n    return(\n        <div id=\"subplot-2-grid-interface\" className=\"interface\">\n            <form onChange={handleChange}>\n                .subplot2grid(\n                \n                (<input id=\"shape-1\" type=\"number\" defaultValue=\"1\" max=\"10\" min=\"1\"/>\n                <input id=\"shape-2\" type=\"number\" defaultValue=\"1\" max=\"10\" min=\"1\" />),\n\n                (<input id=\"loc-1\" type=\"number\" defaultValue=\"0\" max=\"9\" min=\"0\" max={shape[0] - rowspan} />\n                <input id=\"loc-2\" type=\"number\" defaultValue=\"0\" max=\"9\" min=\"0\" max={shape[1] - colspan}/>),\n\n                <br/>\n                \n                rowspan=<input id=\"rowspan\" type=\"number\" defaultValue=\"1\" max=\"10\" min=\"1\" max={shape[0] - loc[0]}/>,\n                colspan=<input id=\"colspan\" type=\"number\" defaultValue=\"1\" max=\"10\" min=\"1\"/>,\n\n                )\n            </form>\n        </div>\n    )\n\n}\n\nexport default Subplot2GridInterface;","import React from 'react';\nimport { start } from 'pretty-error';\n\nconst Subplot2Grid = ({ gridSpecs }) => {\n\n\n\n    const {shape, loc, rowspan, colspan} = gridSpecs\n\n    const createMatrix = (shape) => {\n        let matrix = [];\n        let index = 0\n        while(matrix.length < shape[0]){\n            let newRow = []\n            while(newRow.length < shape[1]){\n                newRow.push(index)\n                index += 1\n            }\n            matrix.push(newRow)\n        }\n        return matrix\n    }\n\n    const selectedItemList = () => {\n        let selected = [];\n        const matrix = createMatrix(shape)\n        for(let i = loc[0]; i < loc[0] + rowspan; i++){\n            selected.push(...matrix[i].slice(loc[1], loc[1] + colspan))\n        }\n        return selected\n    }\n    \n    const createGrid = () => {\n        const totalItems = shape[0] * shape[1]\n        const selectedItems = selectedItemList();\n        const gridItems = []\n        for(let i = 0; i < totalItems; i++){\n            if(selectedItems.includes(i)){\n                gridItems.push(\n                    <div key={i} className=\"grid-item selected-true\"><p>{i}</p></div>\n                )\n            } else {\n                gridItems.push(\n                    <div key={i} className=\"grid-item selected-false\"><p>{i}</p></div>\n                )\n            }\n        }\n\n        return gridItems;\n    }\n\n    const displayStyle = {\n        gridTemplateRows: `repeat(${shape[0]}, 1fr)`,\n        gridTemplateColumns: `repeat(${shape[1]}, 1fr)`,\n    }\n\n    return(\n        <div className=\"grid-display\" style={displayStyle}>\n            {createGrid()}\n        </div>\n    )\n}\n\nexport default Subplot2Grid;","import React from 'react';\n\nconst CodeDisplay = ({ type, gridSpec }) => {\n    const gs = gridSpec;\n    return(\n        <div className=\"code-display\">\n            {\n                type === \"add_subplot\" ?\n                <div>\n                    {`fig.add_subplot(${gs.gridSize[0]}, ${gs.gridSize[1]}, ${gs.selectedIndex})`}\n                </div>\n                :\n                <div>\n                    {`plt.subplot2grid((${gs.shape[0]}, ${gs.shape[1]}), (${gs.loc[0]}, ${gs.loc[1]}), rowspan=${gs.rowspan}, colspan=${gs.colspan})`}\n                </div>\n            }\n        </div>\n    )\n}\n\nexport default CodeDisplay;","import React, { Component } from 'react';\nimport './App.css';\n\nimport GridTypeSelect from './components/GridTypeSelect'\nimport AddSubplotInterface from './components/AddSubplotInterface';\nimport Grid from './components/Grid';\nimport Subplot2GridInterface from './components/Subplot2GridInterface';\nimport Subplot2Grid from './components/Subplot2Grid';\nimport CodeDisplay from './components/CodeDisplay';\n\n\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n\n    this.state = {\n      type: \"add_subplot\",\n\n      addSubplot: {\n        gridSize: [1, 1],\n        selectedIndex: 1\n      },\n\n      subplot2Grid: {\n        shape: [1, 1],\n        loc: [0,0],\n        rowspan: 1,\n        colspan: 1\n      }\n    }\n    \n    this.setType = this.setType.bind(this)\n    this.setAddSubplot = this.setAddSubplot.bind(this)\n    this.set2Grid = this.set2Grid.bind(this)\n    this.resetState = this.resetState.bind(this)\n  }\n\n  resetState = () => {\n    this.setState({\n      type: \"add_subplot\",\n\n      addSubplot: {\n        gridSize: [1, 1],\n        selectedIndex: 1\n      },\n\n      subplot2Grid: {\n        shape: [1, 1],\n        loc: [0,0],\n        rowspan: 1,\n        colspan: 1\n      }\n    })\n  }\n\n  setType = (type) => {\n    this.resetState()\n    this.setState({type})\n  }\n\n  setAddSubplot = (gridSize, selectedIndex) => {\n    this.setState({addSubplot: {gridSize, selectedIndex}})\n  }\n\n  set2Grid = (shape, loc, rowspan, colspan) => {\n    this.setState({subplot2Grid: {shape, loc, rowspan, colspan}})\n  }\n\n  render(){\n    \n    return (\n      <div className=\"App\">\n        <h1 className=\"title\"><em>Subplot Planner</em></h1>\n        <p className=\"description\">\n          <em>\n            A simple tool to help you visualize and plan your subplots in matplotlib.\n          </em>\n        </p>\n        <GridTypeSelect selectedType={this.state.type} setType={this.setType} />\n        {\n          this.state.type === 'add_subplot' \n          &&\n          <div>\n            <AddSubplotInterface setAddSubplot={this.setAddSubplot} gridSpecs={this.state.addSubplot}/>\n            <CodeDisplay gridSpec={this.state.addSubplot} type={this.state.type} />\n            <Grid gridSpecs={this.state.addSubplot}/>\n          </div>\n        }\n\n        {\n          this.state.type === \"subplot2Grid\"\n          &&\n          <div>\n            <Subplot2GridInterface set2Grid={this.set2Grid} gridSpecs={this.state.subplot2Grid}/>\n            <CodeDisplay gridSpec={this.state.subplot2Grid} type={this.state.type} />\n            <Subplot2Grid gridSpecs={this.state.subplot2Grid} />\n          </div>\n        }\n\n      </div>\n    );    \n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}